The C toolchain manager
~~~~~~~~~~~~~~~~~~~~~~~
The point of the tool in this directory is setting up custom per-project
toolchains, that is, a compiler/linker with a particular set of libraries.

The general workflow with these tools is tomake a custom toolchain for each
project being worked on by picking tools to use and adding some libraries.

    mkdir /var/tool/project1
    cd /var/tool/project1

    ctool use arm-gcc-9.3
    ctool add musl
    ctool add libcurl

The project can then be configured to use

    CC=/var/tool/project1/bin/cc
    LD=/var/tool/project1/bin/ld
    ...

The scripts would invoke the chosen compiler (installed under some other prefix,
like /opt/arm-gcc-9.3 or whatever) and pass it the right options to use
the headers and libraries unpacked under

    /var/tool/project1/inc
    /var/tool/project1/lib

Once the project is done, the toolchain directory gets removed whole since
it only contains the "working copy" of the toolchain.


No system compiler
~~~~~~~~~~~~~~~~~~
The approach taken here is quite different from what is commonly expected
in a GNU system. The idea here is to remove the concept of a "system compiler"
and effectively build everything with cross-compilers, including the code built
to run locally.

These tools are meant to allow arbitrary pairings between a compiler
(as in, a bunch of host executables) and a set of target libraries.


Library packs
~~~~~~~~~~~~~
Pre-built libraries are packed into mpac archives with two top-level
directories, "inc" and "lib", containing headers and libraries respectively.

    inc/foo.h
    inc/foo/some.h
    inc/foo/other.h
    lib/libfoo.a

These files get unpacked right into the toolchain directory, with only some
basic checks to avoid overwriting existing files.


Toolchain description
~~~~~~~~~~~~~~~~~~~~~
The `use` subcommand reads a simple text file describing the contents of the
bin/ directory.

    bin/as      # symlink to /opt/arm-binutils/as
    bin/readelf # symlink to /opt/arm-binutils/readelf
    bin/ld      # script calling /opt/arm-bintuils/ld with the right -T option
    bin/gcc     # script exec'ing /opt/arm-gcc-9.3/gcc with the right -B, -L,
                # -I and -specs options referencing the toolchain directory
    musl.specs  # the specs file, also referencing the toolchain directory

Unlike with library packs, the scripts in bin/ are host-dependent more than
they are target-dependent, and in most cases must reference the toolchain
directory itself (to let the compiler know where to look for headers etc).

Simple text substition is used to handle toolchain directory references in
in scripts and specs.

See ../../etc/tool/ for some examples.
