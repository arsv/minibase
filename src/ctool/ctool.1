.TH ctool 1
'''
.SH NAME
\fBctool\fR \- C toolchain and library manager
'''
.SH SYNOPSIS
.IP "\fBcd \fI/path/to/tooldir\fR" 4
Change to the toolchain directory before running following commands.
.IP "\fBctool\fR \fBinit\fR" 4
Initialize directory. Run once in order to mark directory as being managed
by ctool. Subsequent commands will refuse to work unless current directory
has been properly initialized.
.IP "\fBctool\fR \fBuse\fR \fItool\fR" 4
Parse tool description to put some symlinks and/or scripts in ./bin
.IP "\fBctool\fR \fBuse\fR \fIpath/to/tool.desc\fR" 4
Same, with explicit path to the tool description.
.IP "\fBctool\fR \fBrepo\fR \fIpath/to/libs/\fR" 4
Use given path as the repository to look up library packages in.
.IP "\fBctool\fR \fBadd\fR \fIlibfoo\fR" 4
Deploy specified library package from the repository.
.IP "\fBctool\fR \fBadd\fR \fIpath/to/libs/libfoo.pac\fR" 4
Same, with explicit path to the package.
.IP "\fBctool\fR \fBremove\fR \fIlibfoo\fR" 4
Remove previously installed package.
.IP "\fBctool\fR \fBunuse\fR \fItool\fR" 4
Parse tool description, delete links and scripts from /bin
.IP "\fBctool\fR \fBunuse\fR \fIpath/to/tool.desc\fR" 4
Same, with explicit tool description path.
.IP "\fBctool\fR \fBreset\fR" 4
Remove all installed libraries, undoing \fBadd\fR commands.
.IP "\fBctool\fR \fBrebin\fR" 4
Remove everything from ./bin, undoing all \fBuse\fR commands.
.IP "\fBctool\fR \fBclear\fR" 4
Remove all libraries and everything from ./bin
'''
.SH DESCRIPTION
'''
This tool is a special purpose package manager for maintaining local
installation of libraries for C or C-like languages.
.P
Assuming a project needs a particular set of libraries, \fBctool\fR
should be used to unpack the libraries in a temporary location and set
up a compiler for the project that would see those libraries only,
regardless of what else is installed in the system and which libraries
other projects use.
'''
.SS Library packages
'''
\fBctool\fR works with pre-built, "binary" packages in \fBmpac\fR(1)
format. Typical contents for such a package would be just
.P
.nf
    inc/foo.h
    inc/foo/some.h
    inc/foo/other.h
    lib/libfoo.a
.fi
.P
The files get unpacked to the toolchain directory, and the compiler gets
instructed to look for headers in inc/ and for libraries in lib/.
'''
.SS Tool description files
'''
These are plain text files describing symlinks and scripts in toolchain's
bin directory. General format:
.P
.nf
    # comments
    
    prefix /opt/arm-gcc-10.3:bin
    
    link gcov
    
    script gcc
    
    > #!/base/bin/msh
    > 
    > exec %PREFIX/bin/gcc -B %TOOL/bin -I %TOOL/inc -L %TOOL/lib "$@"
.fi
.P
This example would produce two files in ./bin, a symlink named gcov
pointing to /opt/arm-gcc-10.3/bin/gcov, and an executable script named
gcc with the specified content. \fB%TOOL\fR gets replaced with the full path
to the toolchain directory, and \fB%PREFIX\fR with the leading part of the
most recent \fBprefix\fR line.
'''
.SS Toolchain directory
'''
The directory \fBctool\fR works on is assumed to be essentialy temporary.
While the compiler (installed elsewhere) and library packages (in the repo)
as seen as read-only external artifacts out of the scope of the project,
the scripts to run the compiler are a part of the project build setup and
the deployed library files are just working copies that can be deleted,
modified or replaced at will.
'''
.SH FILES
'''
.IP "\fB/base/etc/tool/\fIsome-cc\fR.desc\fR" 4
Tool description for \fBctool use \fIsome-cc\fR.
.IP "\fB/base/etc/mpac/\fIgz\fR" 4
Decoder for \fIgz\fR-compressed packages (\fIlibfoo.pac.gz\fR etc).
'''
.SH SEE ALSO
\fBmpac\fR(1).
