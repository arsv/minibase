The role of the udev daemon
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Pretty much Linux system nowadays needs a small userspace service to handle
udev events. This services has to:

  * load modules on request (modalias mechanism)
  * re-transmit the events for libudevd clients
  * possibly runs scripts whenever certain devices get added

In the this project, the role of the udev service (udevmod) is much more
limited than the original udevd, since most device-related services are
expected to get new-device notifications by other means, like an expicit
command to pick up a device, vs picking it up whenever it appears.


Initrd specifics
~~~~~~~~~~~~~~~~
The requirements for the udev handler within initrd (initramfs) are so different
from the main system one that at some point it was decided to make it a separate
tool. The initrd version only needs to handle modaliases, and it is also not
really a service as it has to exit once the rootfs has been mounted.


Device renaming
~~~~~~~~~~~~~~~
One of the ill-conceived ideas from the mainline udevd is to give devices
some sort of descriptive names, i.e. /dev/input/ptr-stick instead of
/dev/input/event19 or something like that.

It cannot be implemented well in Linux.

The approach taken in this project is to always keep the kernel names for
the devices, and write device-acessing services is a way that works well
with the kernel naming scheme.


Device tagging and libinput
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The original udevd has the ability to pass device configuration to clients.
Input devices get the following keys added to their events to indicate which
event they can generate:

    ID_INPUT=1
    ID_INPUT_KEY=1
    ID_INPUT_KEYBOARD=1

Additionally udevd can transmit XKB configuration for keyboards the same way,
by adding keys to the event.

The idea was apparently that udevd is better equipped for querying and matching
physical device data, so all per-device configuration would be stored in udevd
configs and the clients will only get it through udev events.

It's a horrible idea that makes no sense given the way udev works (one-sided
event broadcast), existing implementation are racy in a subtle way, and the
whole thing only really works if the clients are homogeneous -- like say all
of them use libinput and xkbcommon. Because Freedesktop.

The problem with this is that Xorg udev code as well as udev code within
libinput will simply ignore input devices not tagged ID_INPUT. In addition,
Xorg will not apply MatchIs{Keyboard,Pointer,Touchpad} from its config unless
the devices are tagged the right way.

Solely for compatibility with braindamaged Freedesktop stuff, udevmod from
minibase does provide these keys. This is seen as temporary solution until
the crap gets patched out of all relevant clients. My current opinion on this
is that the clients know better how to match the devices they use, and have
better ways of storing their own configuration than shoving it into udevd.d.


Technical background
~~~~~~~~~~~~~~~~~~~~
To listen to udev events, clients open PF_NETLINK socket and subscribe either
UDEV_MGRP_KERNEL (bit 0, mask (1<<0)) or UDEV_MGRP_LIBUDEV (bit 1, mask (1<<1))
groups when bind()ing it. UDEV_MGRP_KERNEL if for kernel-generated messages,
UDEV_MGRP_LIBUDEV is for those coming from udevd.

udev messages do not follow common netlink conventions. Kernel message are
packets of 0-terminated strings that look like this (\0 replaced with \n):

        add@/devices/platform/i8042/serio1/input/input13/event10
        ACTION=add
        DEVPATH=/devices/platform/i8042/serio1/input/input13/event10
        SUBSYSTEM=input
        MAJOR=13
        MINOR=74
        DEVNAME=input/event10

Messages from udevd on UDEV_MGRP_LIBUDEV use a different format format,
private to udevd/libudev, which carries the same data with prepended binary
header. Because, you know, Freedesktop. Luckily libudev accepts raw kernel
messages even when listening on UDEV_MGRP_LIBUDEV, so minibase only uses
the kernel format.

Check ../../temp/udev/udevdump.c, a simple tool that dumps all incoming
messages, to see how it all works on the client side. Events for a particular
device can be triggered at any moment like this:

  echo add > /sys/devices/platform/i8042/serio1/input/input13/event10/uevent

This will force the kernel to repeat the "add" event above. Beware the event
will be processes just like any real kernel event. Some libudev clients may
try to do unexpected things in response.
