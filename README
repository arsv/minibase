What is this?
~~~~~~~~~~~~~
minibase is set of small userspace tools for Linux aiming to provide a base
package to build the foundation of a system. These tools handle early boot
processes (initrd, finding and mounting the rootfs, setting up disk encryption),
user session management ("logind"), service startup and supervision (aka init system).

The tools are written in raw syscalls using a small custom base library.
Standard libc is not needed to build them, only a freestanding compiler
and a linker. There are no runtime dependencies other than the Linux kernel,
the executables are always statically linked.

Supported targets: x86_64 arm aarch64 rv64 mips mips64 i386.


What's inside
~~~~~~~~~~~~~
Current contents of the package:

  * Batch command runner / script interpreter (msh)
  * Early-stage boot utils (switchroot, modprobe, mount).
  * Non-encrypted block device locator (findblk).
  * Encrypted device locator and passphrase prompt (passblk).
  * Support tooling for disk encryption (dektool, dmcrypt).
  - No fsck for any fs yet.

  * Process supervision suite (init, super, reboot, svctl).

  * udev event monitor (udevmod).
  * syslogd and related tools.
  * Non-privileged mount service (mountd, pmount).
  * Controlled privilege escalation service (suhub, sudo).

  * VT/DRI/input multiplexer (vtmux) [see below].
  * Simple non-graphical greeter.

  * Networking interface manager (ifmon), also handles DHCP.
  * Wi-Fi (WPA2-PSK) supplicant and connection manager (wsupp).
  * manual interface setup tools (ip4cfg, ip4info) [incomplete].
  - No sntpd yet.

  * Simple interactive shell (cmd).
  * Basic command line tools (cat, ls, du, df etc).
  * Small linux-specific tools (systime, sync, dmesg etc).

  - No package manager / download tool yet.
  - No audio tools of any kind.

With everything in place, the system should be able to boot on minibase
alone to the point where it's ready run X or Wayland GUI.


Quick start
~~~~~~~~~~~
Bootable images for Qemu (buildroot, minibase, Xorg, Weston) along
with the build scripts are maintained in a dedicated repository:

    https://github.com/arsv/minibase-br/

Get the latest sys-plain or sys-crypt from Releases, check included
instructions. Inspect the build scripts, rootfs and initrd contents
to understand how the system boots. Check doc/boot.txt here as well.

Start reading the sources at temp/compat, src/cmdops, src/init.


How to build and run the tools
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For a proper build, run

    ./configure
    make
    make install     # default DESTDIR is ./out

To try the tools without setting up a VM, configure and build
the project in devel mode:

    make clean
    ./configure devel
    make

Most tools can be run right from their source directories.


How is it different from ... ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Some features in no particular order.

Minibase provides a proper service supervisor. (This is really
only worth mentioning because of inevitable attempts to compare
it to OpenRC).

Init process is staged, similar to s6 and runit but unlike SysV, systemd
and most other systems. The supervisor is unitary (same parent for all
child processes), similar to SysV and sytemd but unlike s6, runit and
other daemontools derivatives.

There is no fstab in minibase, and no conventional mount(1).
The tools that handle mounts are written with hot-plugging in mind.

Minibase comes with a functional replacement for logind that is not
a fork or a clone of systemd-logind, and does not need dbus to work.

There are no conventional logins in minibase and no user passwords.
The passphrase entered during boot is used to unwrap disk encryption
keys. The system is assumed to run on a personal computing device
owned by its only human user.

Sessions are normally pre-configured and pinned to certain VTs.
Switching to a VT starts the session assigned to that particular VT.

Minibase does not use dbus, or any other system bus for that matter.
IPC is done point-to-point over unix sockets using simple netlink-
based protocol.

Minibase is meant to be run with suid bits disabled. Any privilege
escalation in minibase (including the sudo command) happens via IPC
to privileged services.


Just how small exactly?
~~~~~~~~~~~~~~~~~~~~~~~
The largest individual executable so far is wsupp, the WPA supplicant.
Statically linked for x86_64, it's about 27 KiB in size. Realistically
it also needs ifmon (20 KiB) to work, and the client tool wifi (12 KiB).

vtmux (logind equivalent) is about 12 KiB. msh is about 16 KiB.
cmd (interactive shell) is about 18 KiB.

Why bother making it small? Because it's a side effect of making it readable.
The idea is that anyone could pick a tool from minibase, start reading it
and gain complete understanding of how it works in a very reasonable amount
of time, say hours. And if necessary, audit or debug it down to assembly level.
A major point in achieving this is making sure there are no unnecessary
wrappers, useless abstractions or dead code, which in turn shows in the size
of the resulting executables.


Licensing
~~~~~~~~~
GNU Public License version 3, see COPYING.
Limited closed-box license may or may not get added in the future.

The code in lib/sys, lib/bits and lib/arch constitutes the public interface
of the Linux kernel. No claims are made for that code, and it should not be
copyrightable anyway. If unsure, grab corresponding fragments from either
the kernel sources (GPLv2) or the musl libc (MIT license).

The code in lib/crypto is mostly BSD-licensed. See README there.


Credits
~~~~~~~
Dietlibc and "Writing Small and Fast Software" by Felix von Leitner.
https://www.fefe.de/dietlibc/diet.pdf

The project was initially heavily influenced by busybox.
Certain decision from skarnet/s6 project also played significant role.
Syscall code (static inline functions with asm volatile blocks)
follows musl, because musl folks got it right.

The Rust coreutils project provided great deal of inspiration,
specifically by showing how not to write coreutils.


See also
~~~~~~~~
https://busybox.net/
http://www.landley.net/toybox/
http://www.fefe.de/embutils/
http://skarnet.org/software/ (portable-utils, linux-utils)
http://suckless.org (ubase and sbase)
http://jdebp.eu/Softwares/nosh/
http://b0llix.net/perp/
http://u-root.tk/
https://swtch.com/plan9port/

https://www.gnu.org/software/coreutils/coreutils.html
https://www.kernel.org/pub/linux/utils/util-linux/
https://github.com/uutils/coreutils

https://github.com/mit-pdos/xv6-public (userspace tools)
