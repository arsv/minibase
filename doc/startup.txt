The system startup with this project is expected to go roughly like this:

   (early init) -> svchub -> startup script

The point is to get svchub running, spawn system services under svchub,
and then maybe spawn whatever else is needed.

If commanded to shut down, svchub will stop all its services and spawn
the shutdown script.

The early init in most cases should look like this:

         /sbin/init -> /base/etc/boot/sysinit -> svchub
    (initrd) rdinit -> /base/etc/boot/sysinit -> svchub

See ../init for init and rdinit. Both invoke /base/etc/boot/sysinit, an msh
script that should set up the location for the control socket and exec svchub:

    #!/base/bin/msh

    # global process environment setup
    prctl no-new-privs
    setenv PATH /bin:/sbin:/usr/bin

    # prepare the location for the control socket
    mount /base/run - tmpfs

    invoke /base/bin/svchub

This script is also the place to define global environment, the stuff that
svchub will inherit and pass to all its children by default. It can also be
used to do things than can be done prior to starting any services, but note
that it will run as pid 1 and if it fails, it's a kernel panic no attempt
to sync or unmount the rootfs.

Once svchub is running, it will spawn /base/etc/boot/startup which is the
main system startup script. This script will run under svchub, and in case
it dies svchub will attempt to shut the system down cleanly. The rest of
the system initialization should happen in this script, and it should tell
svchub to start whichever services the system needs to run.

    #!/base/bin/msh

    # mount virtual filesystems
    mount /dev/pts - devpts
    mount /run - tmpfs

    # remount root read-write
    mount -e /

    # start system services
    run /base/bin/svcctl start udevmod
    run /base/bin/svcctl start apphub
    run /base/bin/svcctl start ptyhub

    # optionally, waitfor apphub socket and start applications

Note that any process environment changes in the startup script will not
affect the spawned processes, so it is not the right place for setenv.


Initrd specifics
~~~~~~~~~~~~~~~~
See ./initrd.txt on how to set up the image and run rdinit.

As far as the main rootfs is concerned, initrd as a whole completely replaces
the `init` tool. A system that uses initrd (with rdinit from this project) does
not need to have /sbin/init in its main rootfs. Once `rdinit` is done doing its
things, it will invoke /base/etc/boot/sysinit just like `init` would in case
of a straight-to-rootfs startup described above.


System services
~~~~~~~~~~~~~~~
The services are top-level long-running applications managed by svchub.

# Traditional name for these is daemons but a "deamon" implies double-forking
# which these things are explicitly not supposed to do.

These applications do not take user input from stdin and are not expected
to exit normally. Otherwise, it's just another kind of user applications.
See ./userapps.txt for the general idea.

Note that second-level supervisors (apphub, ptyhub, clihub etc -- anything
that is not svchub) are themselves regular system services.


Service startup scripts
~~~~~~~~~~~~~~~~~~~~~~~
Just like all other user applications, all system services have start scripts
associated with them. These scripts define an instance of a service.

To define a system service, place an executable script into /base/etc/init.
Typical contents of the script, say, /base/etc/init/foo:

    #!/base/bin/msh

    setenv FOO bar

    setgid 5
    setuid 11

    exec /usr/bin/foo

Services are spawned by exec()ing the script in a new-forked process.
Any process setup including setuid, prctl etc must be done in either
in the script, or in the binary being spawned.

It is important to exec() into the binary at the end of the script. For svchub,
the service is the process it spawned, that's the pid it will monitor and send
signals to. Keeping the interpreter alive at that pid is at best unnecessary,
and at worst will prevent the signals from reaching the actual service process.


Output capture and logging
~~~~~~~~~~~~~~~~~~~~~~~~~~
Services are not supposed to output anything to stdout or stderr during
normal operation. For abnormal cases, svchub captures their output into a
short ring buffer which the user can inspect using `svctl show`.

Services may use syslog (or some other similar service) for logging events
during normal operation. This is completely unrelated them being supervised
by svctl.

There is no explicit support for redirecting stdout/stderr into syslog in
this project, and doing so is discouraged.


System shutdown
~~~~~~~~~~~~~~~
When commanded to shut down, svchub kills all the services, waits for them
to die, and spawns /base/etc/boot/shutdown, passing it shutdown mode as
the argument:

    /base/etc/boot/shutdown poweroff

There may be system-dependent things there but eventually this script should
run `reboot`, passing it the argument:

    #!/base/bin/msh

    exec /base/bin/reboot $1

`reboot` will attempt to un-mount all remaining filesystems and invoke
sys_reboot with appropriate arguments.
